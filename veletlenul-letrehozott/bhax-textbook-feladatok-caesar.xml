<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/1MRTuKwRsB0">https://youtu.be/1MRTuKwRsB0</link>,
            <link xlink:href="https://youtu.be/RKbX5-EWpzA">https://youtu.be/RKbX5-EWpzA</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Caesar/tm.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tm.c</filename>
            </link> 
        </para>
        <programlisting language="c"><![CDATA[#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;
}]]></programlisting><para>Meghatározom, hogy a háromszögmátrix, amit használni fogok, 5 soros legyen és deklarálok egy tm pointert, ami pointerre fog mutatni</para>
<programlisting language="c"><![CDATA[#include <stdio.h>
    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }
}]]></programlisting><para>Ezzel az iffel megpróbálok helyet foglalni a memóriában a tm-nek, ha ez nem sikerül, -1-et fogunk visszaadni, ez fogja számunkra jelezni, hogy a művelet nem sikerült</para>
<programlisting language="c"><![CDATA[#include <stdio.h>
    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }
}]]></programlisting><para>Hasonlóan az előző ifhez, helyet foglalunk a tm-ben a pointereknek, ha ez nem sikerül, a visszatérési érték -1 lesz.</para>
<programlisting language="c"><![CDATA[#include <stdio.h>
    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;
}]]></programlisting><para>Étréket adunk az alsó háromszögmátrixunknak</para>
<programlisting language="c"><![CDATA[#include <stdio.h>
    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }
}]]></programlisting><para>Kiiratjuk az alsó héromszögmátrixunkat</para>
<programlisting language="c"><![CDATA[#include <stdio.h>
    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;
}]]></programlisting><para>Értéket adunk a negyedik sor első (42), második (43), harmadik(44) és ötödik(45) elemének. A különbség, hogy az első esetben konkrétan megmondjuk melyik elem értékét változtatjuk, a többi esetben a pointerek mozgatásának segitségével változtatunk az értéken.</para>
<programlisting language="c"><![CDATA[#include <stdio.h>
    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
}]]></programlisting><para>Kiiratjuk a mátrixot az új értékekkel, majd felszabaditjuk a tárhelyet.</para>
        <figure>
            <title>A <type>double **</type> háromszögmátrix a memóriában</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/doublecscs.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A <type>double **</type> háromszögmátrix a memóriában</phrase>
                </textobject>
            </mediaobject>
        </figure>                             
        <para>
            A tm különlegessége, hogy egy olyan vektorra mutat, amiben szintén pointerek vannak. Ahogy a felső ábrán is látható a tm[1] egy double pointert adna vissza. A másoik pointer a mátrix egyik sorára mutat, tehát a tm[1][1] a második sor második elemére mutat, mivel a számozás 0-tól kezdődik. A mátrix elemeire többféleképpen is hivatkozhatunk a pointerek segitségével, ez a feladat ezt hivatott bemutatni. Ámbár rengeteg lehetőségünk van megnevezni a mátrix egy elemét, szerintem a legjobb döntés a legrövidebb és legkönyebben megérthető leirási formát alkalmazni, ami a tm[x][y]
        </para>           
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás videó:       
		<link xlink:href="https://www.youtube.com/watch?v=RribkJ_s-7w">https://www.youtube.com/watch?v=RribkJ_s-7w</link>.
 	</para>
        <para>
            Megoldás forrása:  <link xlink:href="Caesar/e.c"><filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/e.c</filename>  </link>.
                            
        </para>
       
            <programlisting language="c"><![CDATA[#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256

int
main (int argc, char **argv)
{

  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];
}]]></programlisting>
        <para>
            Definiálok 2 állandó értéket, a MAX_KULCS és a BUFFER_MERET néven. A MAX_KULCS fogja jelenteni, hogy maximum hány karakterből állhat a kulcs, a BUFFER_MERET pedig, hogy hány karaktert tárolhatunk a bufferben.
        </para>
            <programlisting language="c"><![CDATA[
  int kulcs_index = 0;
  int olvasott_bajtok = 0;

  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);
}]]></programlisting>
        <para>
            Mivel a program meghivásakor adom meg a használni kivánt kulcsot, ezért használnom kell az argv változót, ami azt fogja mutatni hanyadik szónál tartunk. Az első szó, azaz a 0. elem a program inditása lesz, a második szó maga a kulcs, a harmadik a titkositani kivánt file neve, mig a negyedik a kimenet neve.
        </para>
            <programlisting language="c"><![CDATA[while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {

      for (int i = 0; i < olvasott_bajtok; ++i)
	{

	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;

	}
}]]></programlisting>
        <para>
            Ameddig tart a szöveg, a kulcs és a bitenkénti eltolás segitségével megváltoztatjuk a szöveget, mondhatni beleolvasztjuk a kulcsot a szövegbe. Ha ezt a műveletet mégegyszer használnánk a titkositott szövegen, az eredetit kapnánk vissza.
        </para>
            <programlisting language="c"><![CDATA[write (1, buffer, olvasott_bajtok);

    }
}
}]]></programlisting>
        <para>
            Végül kiiratjuk a titkositott szöveget.
        </para>
                   
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=6cJVzgdVa5U">https://www.youtube.com/watch?v=6cJVzgdVa5U</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#exor_titkosito">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#exor_titkosito</link>               
        </para>
        <para>
            A java EXOR törő is hasonlóan működik a C-s változathoz, lehetséges például egy Java exorral titkositott filet a C titkositóban feltörni, természetesen csak akkor, ha ismert a kulcs.
        </para>
<programlisting language="c"><![CDATA[ public class ExorTitkosító{
    
    public ExorTitkosító(String kulcsSzöveg,
            java.io.InputStream bejövőCsatorna,
            java.io.OutputStream kimenőCsatorna)
            throws java.io.IOException {
}]]></programlisting>
<para>
            Létrehozzuk az ExorTitkositó osztályt, amibe a program elinditásakor elmetjük a kulcsot (kulcsSzöveg), azt a szöveget amit tikositani akarunk (bejövőCsatorna) és létrehozzuk a kimeneti file-t (kimenőCsatorna). Az utolsó sor a hibakezelést végzi.
        </para>
<programlisting language="c"><![CDATA[          byte [] kulcs = kulcsSzöveg.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottBájtok = 0;

        while((olvasottBájtok =
                bejövőCsatorna.read(buffer)) != -1) {
            
            for(int i=0; i<olvasottBájtok; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
                
            }
            
            kimenőCsatorna.write(buffer, 0, olvasottBájtok);
            
        }
        
    }
}]]></programlisting>
<para>
            Hasonlóan a C EXOR titkositóhoz, itt is használni fogunk egy tömböt amiben eltároljuk a kulcsot, és egy tömböt, amibe beolvassuk a bejövő szöveget, ez lesz a buffer.
Egy while ciklusban végezzük ez a logikai vagy műveletet, addig, amig van szöveg a bufferben. Ha befejeztük a szöveg titkositását, a kimenetet kiirjuk a megfelelő helyre.
        </para>
<programlisting language="c"><![CDATA[  public static void main(String[] args) {
        
        try {
            
            new ExorTitkosító(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();
            
        }
        
    }
    
}
 
}]]></programlisting> 
<para>
            Már csak a főfüggvény megirása maradt. A main megpróbálja elinditani a programot a try utasitással. A próba során meghivja a titkositót. Ha valami hiba van, a catch fogja elkapni az üzenetet.
        </para>         
    </section>        
    <section xml:id="bhax-textbook-feladatok-caesar.EXOR-toro">
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó:<link xlink:href="https://www.youtube.com/watch?v=sRDQ0CX1hko  ">https://www.youtube.com/watch?v=sRDQ0CX1hko  </link>.
        </para>
        <para>
            Megoldás forrása:      <link xlink:href="Caesar/t.c"><filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/t.c</filename>  </link>        
        </para>
        <para>
	Az egyszerűség kedvéért, és hogy a program biztosan lefusson bármilyen gépen, anélkül hogy túlságosan megterhelje a rendszert egy kicsit egyszerűsitek a problémán. A kódomban maximum 4 betüs kulcsokat keresek, úgy, hogy magukat a betűket ismerem a kucslból, csak a sorrendet nem. Ezzel megkimélem a gyengébb gépeket, de emiatt a program mechanizmusa nem változik.            
        </para> 
<programlisting language="c"><![CDATA[#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 4 
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
    int sz = 0;
    for (int i = 0; i < titkos_meret; ++i)
        if (titkos[i] == ' ')
            ++sz;

    return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{


    double szohossz = atlagos_szohossz (titkos, titkos_meret);

    return szohossz > 6.0 && szohossz < 9.0
           && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
           && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}
}]]></programlisting>
        <para>
            Ismét szükségem lesz egy alapból definiált számra, ami meghatározza a kulcs méretét és a buffert. Két alprogramot fogok használni, hogy megállapitsam, a kigenerált kulcs jó e. Ezt úgy teszem meg, hogy megnézem szerepel e a szavak között a "hogy","nem", "az" és a "ha" szó. Ezek a szavak szoktak a legtöbbször szerepelni a mondatokban, igy ha a szövegünk tartalmazza ezeket a szavakat, majdnem biztosak lehetünk benne, hogy jó kulcsot találtunk.
        </para>   
<programlisting language="c"><![CDATA[void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

    int kulcs_index = 0;

    for (int i = 0; i < titkos_meret; ++i)
    {

        titkos[i] = titkos[i] ^ kulcs[kulcs_index];
        kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

int
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
            int titkos_meret)
{

    exor (kulcs, kulcs_meret, titkos, titkos_meret);

    return tiszta_lehet (titkos, titkos_meret);

}
}]]></programlisting>
        <para>
            Feltörés esetén is a bitenkénti vagyot, ezzel kapjuk meg a titkositott szöveg formáját, ha használjuk rajta a kulcsot.
        </para>  
<programlisting language="c"><![CDATA[int
main (void)
{

    char kulcs[KULCS_MERET];
    char titkos[MAX_TITKOS];
    char *p = titkos;
    int olvasott_bajtok;

    
    while ((olvasott_bajtok =
                read (0, (void *) p,
                      (p - titkos + OLVASAS_BUFFER <
                       MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
        p += olvasott_bajtok;

    
    for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
        titkos[p - titkos + i] = '\0';
	char str[4]= {'t', 'i', 'k', 'a'};
    
    for (int ii = 0; ii <= 4; ++ii) 
	for (int li = 0; li <= 4; ++li)
	    for (int ki = 0; ki <= 4; ++ki)
		for (int ji = 0; ji <= 4; ++ji)
                                {
                                    kulcs[0] = str[ii]; 
                                    kulcs[1] = str[li];
                                    kulcs[2] = str[ki];
                                    kulcs[3] = str[ji];
                                    
                                    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
                                        printf
                                        ("Kulcs: [%c%c%c%c]\nTiszta szoveg: [%s]\n", 
                                         kulcs[ii], kulcs[li], kulcs[ki], kulcs[ji], titkos);

                                    
                                    exor (kulcs, KULCS_MERET, titkos, p - titkos);
                                }

    return 0;
}]]></programlisting>
        <para>
          Mostmár csak meg kell hivni az elkészotett alprogramokat a főfüggvényben. Itt adom meg azt is, hogy melyik az a 4 karakter aminek szeretném ha kipróbálná az összes variációját, jelen esetben ezek a t,i,k,a . Négy ciklust használok, ezek segitségével irom át a szöveget. Ahogy megkapom a forditást és tiszta is, megvan a végeredményem, a program feltörte a kódot. Ha nem négy megadott betűre szeretném lefuttatni, annyi dolgom van, hogy az összes lehetséges betű kombinációját kell vennem, ez megoldható ciklusok használatával is.
A kód feltörése sokkal bonyolultabb és hosszabb folyamat, mint a titkositás, de ha az ember egy jó géppel rendelkezik, akkor egy 16 betűs kulcs feltörése sem jelent nagy kihivást, pontosan ezért nem használják ezt a fajta titkositást a modern időkben.
        </para>           
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            Neurális hálók alatt két dolgot érthetünk: biológiai értelemben véve, a neurális hálózatot neuronok alkotják, amik összeköttetésben vannak egymással - ezek a hálók megtalálhatóak az idegrendszerekben - informatikai értelemben véve pedig mesterséges neurális hálózatra gondolunk, ez lehet akár gép vagy program, ami egy biológiai neurális hálózatot mintáz. A mesterséges neurális hálókat általában a technikában használják.
        </para> 
        <para>
A programban mi egy mesterséges neurális hálózattal foglalkozunk, neki próbálunk "megtanitani" különböző műveleteket, név szerint az OR-t, az AND-et és az EXOR-t. Azért, hogy ezeket a műveleteket használni is tudja, adatokra is szükség van, ezt a programban ax-el jelöljük, ahol x egy természetes szám. A plot függvénnyel ki is tudjuk rajzolni a hálót, és az is megfigyelhető, hogy egészen jól tudja használni az OR-t, az értékek megközelitőleg pontosak.
        </para>  <para>
Az AND is, hasonlóan az OR-hoz, egészen jó megoldásokat ad vissza, igy az ember azt gondolná, hogy az EXOR-al sem lehet semmi baj. Ez egy hatalmas tévedés, ugyanis itt a hibahatár már nem egy rendkivül kis szám lesz, a program egész nagyokat tud tévedni. Rengeteg gondolkodás után, végül rájöttek a programozók, hogyan is hidalható át ez a probléma, rejtett- vagy hidden neuronokkal. Ezt a megoldást használva, a hálónak már az EXOR sem jelent igazi nehézséget, az eredmények ismét nagyon pontosak lesznek.
        </para>
                
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/XpBnR31BRJY">https://youtu.be/XpBnR31BRJY</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/nahshon/blob/master/ql.hpp#L64">https://github.com/nbatfai/nahshon/blob/master/ql.hpp#L64</link>               
        </para>
        <para>
            Perceptronokról informatikában leginkább a mesterséges intelligencia, azon belül a neurális hálók témakörében találkozhatunk. A perceptronnak fontos szerepe van, leellenörzi a bemenetet, majd egy feltétel alapján dönt, mi legyen a kimenet.
        </para>    
        <para>
            Tehát a perceptronok hasznosak, segitségükkel létrehozhatunk egy hibahatárt, amit a program be fog tartani. Feltételezzük, hogy 100 emberből legalább 80-nak magánhangzóval kezdődik a neve. Egyértelmű, hogy azt várjuk el, hogy legyen 80 olyan bemeneti adatunk, ahol a személy neve magánhangzóval kezdődik. Azonban ha a Perceptron megtalálja a 21. személyt akinek mássalhangzóval kezdődik a neve visszadob egy olyan értéket, ami jelzi nekünk, hogy a feltétel nem teljesült, például a (-1)-et. Ha ez történt meg, akkor a hibahatárt át kell állitanunk, finomhangolást kell végeznünk rajta.
        </para>     
        <para>
            Általában a finomhangolást nagyon magas határnál kezdi, majd addig csökkentik, amig elfogadható a hibák mennyisége.
        </para>             
    </section>        
        

</chapter>                

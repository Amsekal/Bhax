<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>

        <para>
            Állapotátmenet gráf:  <link xlink:href=" https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_1.pdf    "> 27.dia   </link> 
<figure>
            <title>A Turing gép működése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/turing.png"/>
                </imageobject>
                <textobject>
                    <phrase></phrase>
                </textobject>
            </mediaobject>
        </figure>         
           
        </para>
        <para>
           A Turing gép Alan Turing találmánya, ezt az automatikus számolás céljával hozta létre, akkoriban ugyanis még nem voltak számológépek.
		   
        </para>
		        <para>
Működése rétegelt: Minden időben van egy helyzete a memóriaszalagon, van aktuális állapota amit programozással adunk meg.
A gép lépésenként olvas egy szimbólumot, majd adott feltételek segitségével választ 3 lehetőség közül: Beirja a szimbólumot, Poziciót vált vagy Stop állapotba lép. Igy működik a decimálisból unárisba váltó gép is.</para>  
<para>
Egy unáris számot úgy épitünk fel, hogy annyi vonalat (1-es számjegy) húzunk, ahányszor a számból levonható 1. Ha vissza szeretnénk kapni a decimális számot, ezt az algoritmus kell elvégeznünk visszafelé.
        </para><para>A Decimális számrendzser a már mindenki által jól ismert és használt számrendszer, ahol 10 számjegy van, ezekből épülnek fel a számok. Ezek a számjegyek:0,1,2,3,4,5,6,7,8,9.
</para>   
<para>Az Unáris számrendszer is egy ismert és használt számrendszer, csak név szerint sokan nem ismerik. Ez egy olyan számrendszer, ahol csak egy számjegyünk van: az egyes. Ezt szokták vonalakkal is jelölni. A vonalak száma jelzi a szám értékét. A gyerekek amikor az ujjukat használják számolásra, akkor unáris számrendszert használnak.
</para>   
<para>Például, ha a képen látható 10-es számot szeretnénk unárisba átalakitani, ez lenne a menete: a szám beolvasása után a program elér az egyelnőségjelhez, ami azt jelzi, hogy állapotváltás fog következni, ezért visszalép. A tizesek helyén szereplő 1-est 0-ra cseréli, mig az egyesek helyén elhelyezkedő 0-ást egy kilencsere, igy a decimális számunk jelenleg 09, ami 9. A lépés végetért visszatérünk az egyenlőségjel elé, és mivel elvégeztünk egy minusz egyes állapotváltást, az unáris számunk értéke is növekszik. Mivel eddig egyetlen darab 1-es számjegy sem szereplet az unáris számban, ez lesz az első, az unáris számunk jelen pillanatban: 1 Ezek után a fentebb leirtak alapján működik a program.
</para>  
<para>Következő lépés: Decimális szám: 8, Unáris szám: 11
</para> 
<para>Következő lépés: Decimális szám: 7, Unáris szám: 111
</para>
<para>Következő lépés: Decimális szám: 6, Unáris szám: 1111
</para>
<para>Következő lépés: Decimális szám: 5, Unáris szám: 11111
</para>
<para>Következő lépés: Decimális szám: 4, Unáris szám: 111111
</para>
<para>Következő lépés: Decimális szám: 3, Unáris szám: 1111111
</para>
<para>Következő lépés: Decimális szám: 2, Unáris szám: 11111111
</para>
<para>Következő lépés: Decimális szám: 1, Unáris szám: 111111111
</para>
<para>Következő lépés: Decimális szám: 0, Unáris szám: 1111111111
</para> 
<para>Abban a pillanatban, ahogy lenulláztuk a megadott decimális számot, megkapjuk unárisban.
</para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
          
        </para>
        <para>
                        Forrás:  <link xlink:href=" https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_1.pdf    "> 30.-32.dia   </link>                
        </para>
        <para>
            Ez egy generativ nyelv. Ennek a nyelvnek alapja a terminális jel/szimbólum. A környezetfüggetlen nyelvtan, olyan nyelvtan, amelyben változzokból helyettési szabályok sorozatával konstansokból álló mondatokat kapunk.
			A fent emlitett nyelv környezetfüggő
        </para>
<para>1. környezetfüggő generativ gramatika
</para> 
  <para>Első sorban szükségünk lesz a nyelv megalkotásához, nyelvi konstansokra és változókra.
</para>  
<programlisting language="c"><![CDATA[ A,B,C változók
a,b,c konstansok
]]></programlisting> <para>Szükségünk lesz még levezetési szabályokra is, amelyeknek köszönhetően eljutunk a kivánt alakhoz.
</para>    

<programlisting language="c"><![CDATA[ A - abc, A - aBbc, Bb - bB, Bc - Cbcc, bC - Cb, aC - aaB, aC - aa
]]></programlisting> 

<para>
Vegyük az A változót, célunk, hogy úgy alakitsuk, hogy a kivánt alakhoz hasonló alakot vegyen fel.
</para>  
<programlisting language="c"><![CDATA[ A (A - aBbc) // A helyett aBbc-t fogunk irni
aBbc (Bb - bB)
abBc (Bc - Cbcc)
abCbcc (bC - Cb)
aCbbcc (aC - aa)
aabbcc 
]]></programlisting> 

<para>Az utolsó sorban megtekinthető a végleges alak, ami a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> formában van.
</para>  



<para>2. környezetfüggő generativ gramatika</para> 

  <para>Első sorban szükségünk lesz a nyelv megalkotásához, nyelvi konstansokra és változókra.
</para>  
<programlisting language="c"><![CDATA[ A,B,C változók
a,b,c konstansok
]]></programlisting> <para>Szükségünk lesz még levezetési szabályokra is, amelyeknek köszönhetően eljutunk a kivánt alakhoz.
</para>    

<programlisting language="c"><![CDATA[A - aAB, A - aC, CB - bCc, cB - Bc, C - bc
]]></programlisting> 

<para>
Vegyük az A változót, célunk, hogy úgy alakitsuk, hogy a kivánt alakhoz hasonló alakot vegyen fel.
</para>  
<programlisting language="c"><![CDATA[ A (A - aAB)
aAB (A - aC)
aaCB (CB - bCc)
aabCc (C - bc)
aabbcc

]]></programlisting> 

<para>Az utolsó sorban megtekinthető a végleges alak, ami a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> formában van.
</para>  

<para>A két nyelv leirása és a szabályok megtalálhatóak <link xlink:href="Chomsky/Chomsky2.txt">
                <filename>itt</filename>
            </link>  
</para>  
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=KAhxMUW1rVc ">https://www.youtube.com/watch?v=KAhxMUW1rVc </link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="Chomsky/hivatkozas.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/hivatkozas.c</filename>
            </link>  

        </para>        <para>Tutoráltam: Deák Rúben
        </para> 
        <para>
            Először irok egy for ciklust.</para>
<programlisting language="c"><![CDATA[%{
#include <stdio.h>

int main()
{int s=0;
for ( int i=0;i<5;i++)
s++;
printf("Vege\n");
return 0;
}
]]></programlisting>
     <para>A leirt program nem fut le C98-as szabványt használva, mivel ebben a szabványban még nem volt lehetséges ciklusváltozó deklarálása. Ha ezt a kódot szeretnénk C89-es szabvánnyal futtatni, az alábbi módon lehetne:</para> 
<programlisting language="c"><![CDATA[%{ #include <stdio.h>

int main()
{int i,s=0;
for ( i=0;i<5;i++)
s++;
printf("Vege\n");
return 0;
} ]]></programlisting>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link> (15:01-től).
Futás közben:<link xlink:href="https://www.youtube.com/watch?v=_ycGBg5CF_k">https://www.youtube.com/watch?v=_ycGBg5CF_k</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Chomsky/realnumber.l">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/realnumber.l</filename>
            </link> 
        </para>
<para>A használt program 3 részből áll:</para>
        <programlisting language="c"><![CDATA[%{
#include <stdio.h>
int realnumbers = 0;
%}]]></programlisting>
<para>Az első rész sima C kód, amelyben deklarálunk egy realnumbers nevű változót, ami a valós számok előfordulását fogja számolni. Ezt a változót 0-tól inditjuk.</para>
 <programlisting language="c"><![CDATA[%{
digit	[0-9]
%%
{digit}*(\.{digit}+)?	{++realnumbers; 
    printf("[realnum=%s %f]", yytext, atof(yytext));}
%%]]></programlisting>
<para>A második részben már nem csak C kód található. Itt megadjuk a keresési feltételeket: egy olyan szövegrészletet keresünk, ahol 0 vagy több számjegy van (ezt jelzi a digit *), amit egy pont követ, ami után 1 vagy annál több számjegyet találunk.
A pont előtti \ azt a célt szolgálja, hogy a program felismerje, hogy mi a pontra, mint karakterre gondolunk, nem egy bármilyen karakterre.
Ezek után ismét C kód következik, ezzel kiiratjuk a szövegbe, ha találunk egy valós számot, és növeljük a realnumbers változó értékét eggyel.</para>
 <programlisting language="c"><![CDATA[%{
int
main ()
{
 yylex ();
 printf("The number of real numbers is %d\n", realnumbers);
 return 0;
}
]]></programlisting>
        <para>
            A harmadik kódrészletben hivjuk meg a lexikális elemzőt, ami az általunk megadott feltételek alapján fog keresni a szövegben.

Egy lexikális elemző nagyon hasznos tud lenni, ugyanis a segitségével a programunknak nem betűnként kell beolvasnia a forrást, igy sok időt és erőforrást tudunk megspórolni.
        </para>
    </section>                     

    <section>
        <title>Leetspeak</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/06C_PqDpD_k">https://youtu.be/06C_PqDpD_k</link>
 </para><para>Futás közben:<link xlink:href="https://www.youtube.com/watch?v=-OrREI6GZKI">https://www.youtube.com/watch?v=-OrREI6GZKI</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Chomsky/l337d1c7.l">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/l337d1c7.l</filename>
            </link>  
        </para>
        <programlisting language="c"><![CDATA[%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
  #include <ctype.h>

  #define L337SIZE (sizeof l337d1c7 / sizeof (struct cipher))
    
  struct cipher {
    char c;
    char *leet[4];
  } l337d1c7 [] = {

  {'a', {"4", "4", "@", "/-\\"}},
  {'b', {"b", "8", "|3", "|}"}},
  {'c', {"c", "(", "<", "{"}},
  {'d', {"d", "|)", "|]", "|}"}},
  {'e', {"3", "3", "3", "3"}},
  {'f', {"f", "|=", "ph", "|#"}},
  {'g', {"g", "6", "[", "[+"}},
  {'h', {"h", "4", "|-|", "[-]"}},
  {'i', {"1", "1", "|", "!"}},
  {'j', {"j", "7", "_|", "_/"}},
  {'k', {"k", "|<", "1<", "|{"}},
  {'l', {"l", "1", "|", "|_"}},
  {'m', {"m", "44", "(V)", "|\\/|"}},
  {'n', {"n", "|\\|", "/\\/", "/V"}},
  {'o', {"0", "0", "()", "[]"}},
  {'p', {"p", "/o", "|D", "|o"}},
  {'q', {"q", "9", "O_", "(,)"}},
  {'r', {"r", "12", "12", "|2"}},
  {'s', {"s", "5", "$", "$"}},
  {'t', {"t", "7", "7", "'|'"}},
  {'u', {"u", "|_|", "(_)", "[_]"}},
  {'v', {"v", "\\/", "\\/", "\\/"}},
  {'w', {"w", "VV", "\\/\\/", "(/\\)"}},
  {'x', {"x", "%", ")(", ")("}},
  {'y', {"y", "", "", ""}},
  {'z', {"z", "2", "7_", ">_"}},
  
  {'0', {"D", "0", "D", "0"}},
  {'1', {"I", "I", "L", "L"}},
  {'2', {"Z", "Z", "Z", "e"}},
  {'3', {"E", "E", "E", "E"}},
  {'4', {"h", "h", "A", "A"}},
  {'5', {"S", "S", "S", "S"}},
  {'6', {"b", "b", "G", "G"}},
  {'7', {"T", "T", "j", "j"}},
  {'8', {"X", "X", "X", "X"}},
  {'9', {"g", "g", "j", "j"}}
  
// https://simple.wikipedia.org/wiki/Leet
  };
  
%}
%%
.	{
	  
	  int found = 0;
	  for(int i=0; i<L337SIZE; ++i)
	  {
	  
	    if(l337d1c7[i].c == tolower(*yytext))
	    {
	    
	      int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
	    
          if(r<91)
	        printf("%s", l337d1c7[i].leet[0]);
          else if(r<95)
	        printf("%s", l337d1c7[i].leet[1]);
	      else if(r<98)
	        printf("%s", l337d1c7[i].leet[2]);
	      else 
	        printf("%s", l337d1c7[i].leet[3]);

	      found = 1;
	      break;
	    }
	    
	  }
	  
	  if(!found)
	     printf("%c", *yytext);	  
	  
	}
%%
int 
main()
{
  srand(time(NULL)+getpid());
  yylex();
  return 0;
}
]]></programlisting>
        <para>
            A leet nyelv lényege, hogy a betűket rájuk hasonló számmal vagy más karakterekkel helyettesitsünk, például az a helyett használhajuk: 4, @, /-\\.
	A program hasonlit az előző feladathoz, azzal a különbséggel, hogy most nem számokat keresünk, hanem betűket. Létrehozunk egy tömböt, ahol eltároljuk a betüket és leet megfeleőiket. Eztuán egy for ciklus segitségével megkeressük a betűt ebben a tömben, és egy randomizáló rész segitségével véletlenszerűen választunk egy leet megfelelőt a megadottakból. Ha egy betűnek nincs leet megfelelője, változtatás nélkül kiiratásra kerül.
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);
//INTERACT signal esetén a jelkezelő eldönti, hogyan reagáljon a program]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)
//Inditunk egy for ciklust, ahol i 0-tól indul, és a ciklusban lévő utasitások elvégzése előtt nő az értéke.]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)
//For ciklus, ahol az i értéke a ciklusban lévő utasitások elégzése után nő]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)
// Egy for ciklus, ahol egy tömbi i-edik eleme felveszi az i+1 értéket, és az i nő a ciklus végén]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)
//Egy for ciklus, ami addig megy amig i kisebb mint n és a d pointer egyenlő az s pointerrel.]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));
//Kiirunk két számot, amit az f függvény állit elő.]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);
//Kiirunk két számot, az egyiket az f függvény állitja elő az a változó segitségével, a másik szám pedig az a változó.]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);
//Kiir két számot, az egyiket az f függyvény segitségével, a másik pedig az a értéke lesz, ami ha a függvényben megváltozott, a változás megmarad.]]></programlisting>            
            </listitem>
        </orderedlist>



    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            1.Minden x esetén igaz, hogy van olyan y, amely nagyobb mint x és primszám.
        </para>
        <para>
          2. Minden x esetén igaz, hogy van olyan y, amely nagyobb mint x, primszám és az y+2 is primszám.
        </para>
        <para>
           3. Létezik olyan y, amely minden x primnél nagyobb
        </para>
        <para>
           4. Létezik olyan y, amelynél egyik x sem kisebb és prim.
        </para>   	                                                                                                                                                                               
          	</section>

    <section>
        <title>Deklaráció</title>
            <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=rjaIqjzDVC4">https://www.youtube.com/watch?v=rjaIqjzDVC4</link>
        </para>
        <para>
            Megoldás forrása:   <link xlink:href="Chomsky/deklaracio.cpp">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/deklaracio.cpp</filename> </link>
        </para>
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

        <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;// integer tipusú változó]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;//b pointer, ami a memóriaciméra mutat]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;//r hivatkozás a-ra]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];//c tömb]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;//tr tömb referencia c tömbre]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];// d pointerekből álló tömb]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();//egészre mutató visszaadó függvény]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();//mutatóra mutató függvény]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)//Függvénymutató, ami egy egészet visszaadó függvényre mutató mutatóval visszatérő függvény]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);//Függvénymutató, ami egy egészet visszaadó függvényre mutató mutatót visszaadó függvényre mutat]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        
        <para>
            Az utolsó két deklarációs példa demonstrálására két olyan kódot
            írtunk, amelyek összahasonlítása azt mutatja meg, hogy miért 
            érdemes a <command>typedef</command> használata: <link xlink:href="Chomsky/fptr.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/fptr.c</filename>
            </link>,
            <link xlink:href="Chomsky/fptr2.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/fptr2.c</filename>.
            </link>  
            
        </para>
        <programlisting><![CDATA[#include <stdio.h>

int
sum (int a, int b)
{
    return a + b;
}

int
mul (int a, int b)
{
    return a * b;
}

int (*sumormul (int c)) (int a, int b)
{
    if (c)
        return mul;
    else
        return sum;

}

int
main ()
{

    int (*f) (int, int);

    f = sum;

    printf ("%d\n", f (2, 3));

    int (*(*g) (int)) (int, int);

    g = sumormul;

    f = *g (42);

    printf ("%d\n", f (2, 3));

    return 0;
}]]></programlisting>            
        <programlisting><![CDATA[#include <stdio.h>

typedef int (*F) (int, int);
typedef int (*(*G) (int)) (int, int);

int
sum (int a, int b)
{
    return a + b;
}

int
mul (int a, int b)
{
    return a * b;
}

F sumormul (int c)
{
    if (c)
        return mul;
    else
        return sum;
}

int
main ()
{

    F f = sum;

    printf ("%d\n", f (2, 3));

    G g = sumormul;

    f = *g (42);

    printf ("%d\n", f (2, 3));

    return 0;
}
]]></programlisting>            
        <para>
            A feladat megoldása alatt rengeteg dolgot tudtam meg és tanultam. Ilyen például a mutatók használata.</para><para> Mint kiderült a mutatókat rengeteg féle képpen lehet használni, a lehetőségek határtalanok. Az embernek viszont rengetek időbe kerül megfejteni hogy mit is akar a kódrészlet, ha több mutató is szerepel benne, legalábbis magamon azt vettem észre, hogy minél több mutató van és minél öszetetteb dolgokra mutatnak, annál nehezebb rájönni, pontosan mit is lehet vele elérni.</para><para> A mutatók használata rengeteg előnnyel jár,viszont ha túl bonyolult helyeken akarjuk őket használni, nem biztos, hogy átláthtó és megérthető lesz a programunk.
        </para>
    </section>                     
   <section>          
    <title>Minecraft MALMÖ - Csiga diszkrét</title>

    <para>Forrás link: <link xlink:href="https://github.com/Amsekal/Bhax/blob/master/diszkretcsiga.py">
                <filename>Github link</filename>    </link>
    </para>
    <para>
A feladatban az a célünk, hogy megoldjuk, hogy a minecraft karakterünk csigaszerű mozgással haladjon egyre feljebb az arénában, addig amig nem találkozik a lávával, ami után értelem szerűen meghal, hasonlóan az első MALMÖs feladathoz. Itt azonban diszkrét mozgási parancsokat használunk, számoljuk a karakterünk lépéseit, és az alapján döntünk a következő mozdulatról.
    </para>
   </section>   

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                


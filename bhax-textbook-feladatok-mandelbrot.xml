<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section xml:id="bhax-textbook-feladatok-mandelbrot.Mandelbrot">
        <title>A Mandelbrot halmaz</title>
        <para>
            Írj olyan C programot, amely kiszámolja a Mandelbrot halmazt!     
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Futtatás: <link xlink:href="https://www.youtube.com/watch?v=dJKAj5ebrGg">https://www.youtube.com/watch?v=dJKAj5ebrGg</link>
        </para>
        <para>
            Megoldás forrása:                
 https://github.com/Amsekal/Bhax/blob/master/bhax-master/attention_raising/CUDA/mandelpngt.c%2B%2B          
        </para>
                <figure>
            <title>A Mandelbrot halmaz a komplex síkon</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandell.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A Mandelbrot halmaz a komplex síkon</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>
  	A Mandelbrot halmaz egy olyan komplex számok halmaza, amelyet ha kivetitűnk a sikra egy látványos és egyben érdekes alakzatot kapunk. Ezt a halmazt olyan számok alkotják, amelyeknek van valós és imaginárius részük is, igy lehetséges az is, hogy gyök alatt negativ számunk legyen.
        </para>

        <para> 
	A kód segitségével megállapitjuk, hogy egy pont mikor eleme a halmaznak. Ha eleme, a pontot feketére szinezzük.       
        </para>

    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Írj olyan C++ programot, amely kiszámolja a Mandelbrot halmazt!                     
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
                <para>
            Forrás: https://github.com/Amsekal/Bhax/blob/master/bhax-master/attention_raising/Mandelbrot/3.1.2.cpp 
        </para>

        
<para>
Hasonlóan az előző feladathoz, itt is az a célunk, hogy a Mandelbrot halmazt kirajzoljuk, tehát a két végeredménynek azonosnak kell lennie. A különbség csak annyi, hogy ebben a programban használni fogunk egy osztályt, ami segit a komplex számok kezelésében.
        </para>
        <programlisting language="c++">
<![CDATA[// Verzio: 3.1.2.cpp
// Forditas:
// g++ 3.1.2.cpp -lpng -O3 -o 3.1.2
// Futtatas:
// ./3.1.2 mandel.png 1920 1080 2040 -0.01947381057309366392260585598705802112818 -0.0194738105725413418456426484226540196687 0.7985057569338268601555341774655971676111 0.798505756934379196110285192844457924366
// ./3.1.2 mandel.png 1920 1080 1020 0.4127655418209589255340574709407519549131 0.4127655418245818053080142817634623497725 0.2135387051768746491386963270997512154281 0.2135387051804975289126531379224616102874
// Nyomtatas:
// a2ps 3.1.2.cpp -o 3.1.2.cpp.pdf -1 --line-numbers=1  --left-footer="BATF41 HAXOR STR34M" --right-footer="https://bhaxor.blog.hu/" --pro=color
// ps2pdf 3.1.2.cpp.pdf 3.1.2.cpp.pdf.pdf
//
//
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.


#include <iostream>
#include "png++/png.hpp"
#include <complex>
]]>
        </programlisting>  <para>
Látható, hogy továbbra is szükség van a png++ -ra, ennek köszönhetően vagyunk képesek kirajzolni a halmazt a sikra ebben és az előző programban is.
        </para>
        <programlisting language="c++">
<![CDATA[ 
int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  
  for ( int j = 0; j < magassag; ++j )
    {
    

      for ( int k = 0; k < szelesseg; ++k )
        {



          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
]]>
        </programlisting>     
<para>
A különbség tehát a complex osztály használatában van. Ez egyszerübbé is teszi a kódot, ugyanis nem kell azzal bajlódnia a programozónak, hogy külön változót használjon egész és imaginárius résznek. Az osztály segitségével elég egy változót használni, és egy utánna irt zárójelbe megadni a két részt.
        </para>   
<para>Fontosnak tartom még megjegyezni, hogy a programot úgyanúgy kell futtatni, mint az előző esetben.
        </para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>

        </para>       
        <para>
A Mandelbrot és Júlia halmazok igen hasonlóak, a legszembetűnőbb különbség az, hogy mig a c változó valós és imaginárius része változott a program továbhaladtával a Mandelbrot halmaz esetén, addig a Júlia halmaznál ezeket az értékeket rögzitjük. Ezt a kódokban a két for ciklusban figyelhetjük meg.

        </para>       
                       
        
<para>       
         Most következi egy igazán fontos kérdés: Ez nekünk miért jó?
Erre a válasz egészen egyszerű: amig a Mandelbrot halmaz úgyanúgy néz ki, addig Júlia halmazból jóval több van, és ezzel a megoldással ki is tudjuk őket rajzolni. Nincs más dolgunk csak a C változó értékét módositsuk. Azonban nem értő kezek között nagy annak a valószinűsége, hogy a kapott halmaz nem lesz látványos, szerencsére az internet bőven szolgál számértékekkel, amivel csodás látványt érhetünk el.              
        
        </para>
        <para>
            Ha célunk a biomorfok pontos megértése akkor a következő cikk a segitségünkre lehet. 
            <link xlink:href="https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf">https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf</link>.
A kód megirása nehézséget is jelenthet, szóval nyugodtan használjuk fel az előző feladatokban irt kódot, és a fentebb emlitetteket irjuk át.
        </para>       
       
                           
                                          
                                                                            
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=ihZBrMlpVbM">https://www.youtube.com/watch?v=ihZBrMlpVbM</link>
        </para>
        <para>
            Megoldás forrása:                
 <link xlink:href="https://github.com/Amsekal/Bhax/blob/master/bhax-master/attention_raising/CUDA/mandelpngc_60x60_100.cu">
                <filename>https://github.com/Amsekal/Bhax/blob/master/bhax-master/attention_raising/CUDA/mandelpngc_60x60_100.cu</filename>
            </link>         
        </para>
<para>
Ez a feladat egy kicsivel különlegesebb, mint az előzőek, ugyanis CUDA magokat használó kártyára van szükségünk a futtatásához. Koncepcióban a program megegyezik az előző Madelbrot feladatokkal, a különbség abban feezhető fel, hogy itt a CUDA magok segitségével futtatjuk le a programot.
        </para>
<para>
Mint észrevehető a videókban, a különbség nem triviális, sokkal gyorsabban képes elkésziteni a képet a program, ha CUDA magokat használ. Minél jobb a kártya, annál gyorsabb képgenerálás figyelhető meg.
        </para>
<para>
Mivel a programot a videókártyának irtuk, ezért megfigyelhető, hogy a megszokott gcc vagy g++ helyett most nvcc-t használunk. Hogy használni tudjuk ezt a parancsot szüségünk lesz az nvidia-cuda-toolkitre.
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
        <para>
            Megoldás videó: Folyamatban <link xlink:href=""></link>
            Illetve <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>.        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/binom/Batfai-Barki/frak/">https://sourceforge.net/p/udprog/code/ci/master/tree/source/binom/Batfai-Barki/frak/</link>
        </para>
<para>
Visszatérünk a Mandebrot halmazokhoz, de most nem csak egy képet szeretnénk végeredményként kapni, hanem egy olyan ablakot, ahol képesek vagyunk ránagyitani s halmazra. Ez lehetséges png file esetén is, de ott egy idő után a kép pixeles lesz, és nem lehet kivenni belőle semmit.
</para>
<para>
A megoldás amit használni fogunk ennél egy kicsit bonyolultabb, emiatt talán ez a fejezet legöszetetteb feladata. Az ötlet az, hogy az egérrel kijelölt részre az ablak nem ránagyit, hanem újragenerálja azt a részt. Igy kiküszöbölhető az a probléma, hogy nagyon pixelessé válik a kép, ugyanis a pixelszám azonos lesz.
</para>
<para>
Az első probléma még a kódolás előtt megjelenik, hogyan készitsük el ezt az ablakot. Egy nagyszerű megoldás a Qt eszköztár használata, amelyben elkészithető egy gui(grafikus interfész). Ennek az interfésznek a futtatásához 5 kódrészre van szükségünk, a következőekben ezek szerepeit mutatom be:
</para>
<para>
frakablak.h
</para>
<para>
Ebben a kódrészben egy osztályt hozunk létre, amine van publikus, védett és privát tagja is. A publikus részben a tartományokat/határokat szabjuk meg, amik között mozoghatunk. A védett részben egy függvényt deklarálunk, amely figyelemmel követi, mit csinál a felhasználó. Ennek fontos szerepe lesz, hogy a program tudja, mikor kell nagyitania. Végül a privát tagban a nagyitandó terület van meghatározva.
</para>
<para>
frakszal.h
</para>
<para>
Ismét egy osztályt láthatunk és még pár változót. Ezek segitenek majd a programnak a számolásban és rajzolásban
</para>
<para>
frakszal.cpp
</para>
<para>
Ebben a kódrészben történik a legfontosabb dolog: a Madelbrot halmaz elemeinek kiszámolása, ehez hasonló kódot irtunk az első feladatokban is.
</para>
<para>
main.cpp
</para>
<para>
Itt kerül meghivára qt konstruktora, és itt tesszük a kódhoz a Qt könyvtárat.
</para>
<para>
frak.pro
</para>
<para>
A frak.pro lesz az úgynevezett király, alatta fognak futni az előbb bemutatott kódok, az ő feladata lesz a teljes folyamat kezelése.
</para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Ui3B6IJnssY">https://youtu.be/Ui3B6IJnssY</link>, 4:27-től.
            Illetve <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518</link>
        </para>
<para>
A feladat itt is ugyan az, mint amit az előbb láthattunk, annyi különbséggel, hogy itt JAVA nyelvben kell megirnunk a programot. A kód szerkezete rendkivül hasonló az előző feladatban megirtakéhoz, itt is az egérrel szeretnénk kiválasztani egy részt a nagy egészből, amire ráközelitenénk/ahová utaznánk.
</para>
<para>
Azonban ez a program többre is képes, mint amit az előbb létrehoztunk. Nem csak kirajzolja azt amire ránagyitunk, de képes pillanatképet is késziteni arról, ezt a kódrészt a public void pillanatfelvétel() alatt találhatjuk meg. A programrész nem olyan bonyolult, lényegében kimenti a jelenleg aktiv ablakot, és elnevezi. Ezt az elnevezést segiti egy számláló is, igy ha több képet akarunk csinálni, az egyik nem fof rámentődni a másikra a néveggyezés miatt.
</para>
    </section>
       
   <section>          
    <title>Minecraft MALMÖ -Láváig </title>

    <para>Forrás link: <link xlink:href="https://github.com/Amsekal/Bhax/blob/master/lavatlat.py">
                <filename>Github link</filename>    </link>
    </para>
    <para>
A feladat célja, hogy Steve felfele haladjon az arénában addig, amig nem lát lávát. Ha ez megtörténik akkor pedig fusson vissza. Ez egyszerűen megoldható egy while ciklussal, amit akkor szakitunk meg, amikor a látókörünkbe láva kerül.
    </para>
   </section
</chapter>                

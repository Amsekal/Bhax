A java egy objektumorientált programozási nyelv. Ez a programozási nyelv segíthet elmerülni a programozónak az objektumorientált programozásban, ugyanis rengeteg szabványos könyvtár segít, hogy jól mûködõ és könnyen használható eszközökhöz férjen hozzá.
A nyelv megalkotásához sok mindent átvettek a C++ nyelvbõl, de odafigyeltek arra is, hogy ennek hiányosságait megoldják. A java a C++ban megismert mutatók helyett egy sokkal megbízhatóbb referenciát használ, de még rengeteg különbség van a két nyelv között, amire a késöbbiekben kitér a könyv. Annak köszönhetõen, hogy sok mindent megváltoztattak, egy megbízható és biztonságos programok irására alkalmas nyelvet teremtettek elõ.
Az objektumorientáltság azt jelenti, hogy a program objektumokból és osztályokból áll. Egy osztály változókból és függvényekbõl/metódusokból tevõdik össze, a változók alkalmasak értékek, adatok eltárolására, a metódusokban pedig az ezekkel végezhetõ mûveleteket adjuk meg.
A Java forditóprogram a forráskódot egy bájtsorrá alakitja át, majd ezt egy virtuális gép értelmezi. Biztonsági szempontból ez egy remek megoldás, de a sebességet tekintve lassabb, mint más fordítóprogram. A  forráskódot tekintve egyértelmûen látszik, hogy a Java nyelv alapja a C illetve a C++ programozási nyelv.
A Java a World Wide Weben betöltött szerepének köszönheti ismertségét, rengeteg HTML oldalba beépitett program iródott ezen a nyelven. 
Javában a változók rendkívül hasonlóak a C++ változókhoz. Itt is a változó deklarálásakor meg kell határozni a tipust, ezek a tipusok azonosak C++ban, értéket az egyenlõségjellel lehet adni nekik, a mûveletek is hasonlóak. Eltérés, hogy ha egy változó nem kap értéket, Javában hibát fog jelezni, C++ban pedig egy véletlenszerû értéket fog hozzá társitani.  A Java képes a metódusok túlterhelésére is, de az operátor túlterhelés, ami C++ környezetben lehetséges, itt nincs jelen. A java támogatja a nem csak ASCII karaktereket használó kódsorokat is, felismeri akár a görög akár a magyar betûket is.
Osztályokat a class kulcsszóval hozhatunk létre. Az osztályban felsoroljuk az adattagokat és metódusokat, amelyeket a késöbbiekben használni szeretnénk. Az adattagok és metódusok hagyományos megfelelõi a változók és eljárások. Minden elem elérhetõségét meg lehet határozni, ezeket a public, protected, private kulcsszavakkal érhetjük el. A class-on belül adhatóka meg az osztály adottságai is. A javában rengeteg lehetõségünk nyilik grafikákat létrehozni, akár az AWT osztályt felhasználva, akár saját osztály létrehozásával. Ha azt szeretnénk elérni, hogy a grafikánk ne egy állókép legyen, akkor párhuzamosan kell futtatnunk egy végrehajtási szálat, ezt a mûveletet támogatja is a Java. Ezt a Thread osztály felhasználásával érhetjük el. Az AWT  fejlettebb verziója a Swing, ezzel a szöveg megjelenését tehetjük érdekesebbé.
Általában a nyolcbites karakterkészletek az elterjedtek, mint az ASCII és az EBCDIC, de egyikben sem lehet nemzetközi karaktereket pontosan leirni. A Java ezt azzal orvosolta, hogy az Unicode karakterkészletét használja, ami rendelkezik szinte az összes karakterrel, legyen ez magyar betû, jel vagy hangulatjel.
Javában is fellelhetõek a tömbök, ámbár itt valódi tipusok, nem mutató tipusok mint C-ben. Szögletes zárójellel jelöljük õket, hasonlóan az elõbb emlitett C-hez. Itt a tömbök nem lehetnek többdimenziósak, a Java ezt úgy hidalja át, hogy engedi a tömböknek, hogy tömböket tartalmazzanak, igy ugyanazt érjük el. Az operátorok hasonlatosak a C-ben található operátorokhoz, és az olvasási/elvégzési irány is megegyezik. Javában is léteznek postfix, prefix, multiplikativ, additiv operátorok, mûködik a bitenkénti eltolás is. 
A változók tipusai átkonvertálhatóak, néhány esetben automatikusan, de általában a konverzióért a programozó a felelõs. Egy struktúra elemeit hasonlóan érünk el, mint C-ben, a . operátor segitségével. A Javában viszont nincs megkülönböztetõ jelölés osztálytagok elérésére, mint C++ban.
Utasitásokból két fajta létezik: kifejezés-utasitás és deklaráció-utasitás, ezeket pontosvesszõvel zárjuk. Az értékadás, a ++ és – operátorokkal képzett kifejezések, a metódushivások és a new operator használata kifejezés-utasitás, míg a deklarációs-utásitásokkal egy változót hozunk létre. Kapcsoszárójelek között hozható létre egy blokk, ami utasitásokból áll. Itt is, mint C-ben fellelhetõek az elágazások, az if kulcsszó használatával, vagy összetett elágazás esetében a switch és a case kulcsszavakkal. A ciklusok is hasonlóak az elõbb emlitett nyelvben fellelhetõ ciklusokhoz, van elöl és hátul tesztelõ, és léptetõ ciklus is, amiket a break utasitással meg is szakithatunk.
Az osztályok a Java programozási nyelv önálló egységei, amelyek azonos tipusú objektumok modelljét irják le, mint például emberek egy vállalaton belül. Két részbõl áll egy osztálydefinició: egy rész, ami a változókat deklarálja és egy amely az objektum viselkedését irja le. Az osztály változóit hasonlóan a sima változókhoz deklaráljuk. Ezekre a változókra az osztályon belül egyszerûen a nevükkel tudunk hivatkozni, ha a név elé egy pontot teszünk, akkor egy másik objektum változójára hivatkozunk.
Egy metódus fejléce a metódus nevébõl és a benne felhasználni kívánt változókból áll, míg a törzse az elvégzendõ utasitásokat tartalmazza. Ha egy pontosvesszõ van a törzs helyett, az arra utalhat, hogy a metódus absztrakt vagy nativ. Eltérés a C++os osztályoktól, hogy a törzset a fejléctõl nem választhatjuk el.
 Egy metódust a neve leirásával tudunk meghivni a fõprogramban, a neve után zárójelbe pedig leirjuk azokat a változókat, amik szükségesek a sikeres futáshoz. A metódusokat akár túl is terhelhetjük. Léteznek Javában osztályváltozók is, ezek a változók magához az osztályhoz kapcsolódnak. Egy osztályváltozóból csak egy létezik, minden tag, ezen osztozik. Például ilyen változó lenne az alkalmazottak nyugdijkorhatára. 
Az osztálymetóduk magának az osztálynak a mûvelete. Csak osztályváltozókhoz fér hozzá. Végrehajtható akkor is, ha az osztálynak nincsenek tagjai/példányai. Ahhoz, hogy példányositani tudjunk egy osztályt, szükségünk lesz Konstruktorokra. A konstruktor azonos névvel rendelkezik az osztállyal. Egy Konstruktort az osztályban tudunk definiálni, itt határozzuk meg, hogy milyen információkra van szükség, hogy létrehozzunk egy egyedet. Léteznek üres konstruktorok, ilyenkor minden változó késõbb kap értéket, de létrehozhatunk olyan konstruktor is, ami meghiváskor kötelezi a változók feltöltését adatokkal. Ha egy egyedet törölni szeretnénk, azt egy destruktorral érhetjük el. Hasonlóan hozzuk létre mint a konstruktort, csak a neve elé egy tilda karaktert helyezünk.
Az objektumorientált programozás fontos része az öröklõdés. Egy gyerekosztály képes örökölni a szülõ minden mezõjét, és újakat is adhat hozzájuk.
Az Objective-C nyelvben szereplõ protokoll is megtalálható Javában, itt interfész néven. Ez egy új referencia tipus, absztrakt metódusok esetében találkozhatunk velük. A benne látható metódusok csak deklarálódnak, a megvalósitásukra máshol kerül sor. Az interfészek között is fellelhetõ az öröklõdés fogalma.



